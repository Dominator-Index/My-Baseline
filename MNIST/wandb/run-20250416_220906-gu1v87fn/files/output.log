100%|█████████████████████████████████████████████████████████████████████████████████| 9.91M/9.91M [00:02<00:00, 4.86MB/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 28.9k/28.9k [00:00<00:00, 128kB/s]
100%|█████████████████████████████████████████████████████████████████████████████████| 1.65M/1.65M [00:01<00:00, 1.05MB/s]
100%|█████████████████████████████████████████████████████████████████████████████████| 4.54k/4.54k [00:00<00:00, 10.8MB/s]
/home/ouyangzl/.local/lib/python3.12/site-packages/torch/autograd/graph.py:823: UserWarning: Using backward() with create_graph=True will create a reference cycle between the parameter and its gradient which can cause a memory leak. We recommend using autograd.grad when creating the graph to avoid this. If you have to use this function, make sure to reset the .grad fields of your parameters to None after use to break the cycle and avoid the leak. (Triggered internally at /pytorch/torch/csrc/autograd/engine.cpp:1260.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
Test Loss: 0.0249, Test Accuracy: 0.8986
Traceback (most recent call last):
  File "/home/ouyangzl/BaseLine/MNIST/MNIST_train.py", line 167, in <module>
    successive_pca_spectrum = Successive_Record_Steps_PCA(recorded_steps_top_eigenvectors)
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ouyangzl/BaseLine/MNIST/PCA.py", line 37, in Successive_Record_Steps_PCA
    recorded_steps_top_eigenvectors = normalize_eigenvectors_by_row(recorded_steps_top_eigenvectors)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ouyangzl/BaseLine/MNIST/PCA.py", line 28, in normalize_eigenvectors_by_row
    matrix_to_normalize = np.array(eigenvector_matrix, copy=True)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ouyangzl/.local/lib/python3.12/site-packages/torch/_tensor.py", line 1194, in __array__
    return self.numpy()
           ^^^^^^^^^^^^
TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.
