Start training...
/home/ouyangzl/.local/lib/python3.12/site-packages/torch/autograd/graph.py:823: UserWarning: Using backward() with create_graph=True will create a reference cycle between the parameter and its gradient which can cause a memory leak. We recommend using autograd.grad when creating the graph to avoid this. If you have to use this function, make sure to reset the .grad fields of your parameters to None after use to break the cycle and avoid the leak. (Triggered internally at /pytorch/torch/csrc/autograd/engine.cpp:1260.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
Traceback (most recent call last):
  File "/home/ouyangzl/BaseLine/MNIST/Plot_test.py", line 1, in <module>
    from Experiment_7_test_1 import plot_cosine_similarity_all, plot_single_cosine_similarity
  File "/home/ouyangzl/BaseLine/MNIST/Experiment_7_test_1.py", line 262, in <module>
    eigenvalues_and_eigenvectors = compute_hessian_eigen_pyhessian(
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ouyangzl/BaseLine/MNIST/MNIST_hessian_utils.py", line 24, in compute_hessian_eigen_pyhessian
    hessian_eigen = hessian_computer.eigenvalues(top_n=top_k)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ouyangzl/.conda/envs/Hessian/lib/python3.12/site-packages/pyhessian/hessian.py", line 135, in eigenvalues
    v = orthnormal(v, eigenvectors)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ouyangzl/.conda/envs/Hessian/lib/python3.12/site-packages/pyhessian/utils.py", line 96, in orthnormal
    w = group_add(w, v, alpha=-group_product(w, v))
                               ^^^^^^^^^^^^^^^^^^^
  File "/home/ouyangzl/.conda/envs/Hessian/lib/python3.12/site-packages/pyhessian/utils.py", line 34, in group_product
    return sum([torch.sum(x * y) for (x, y) in zip(xs, ys)])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
